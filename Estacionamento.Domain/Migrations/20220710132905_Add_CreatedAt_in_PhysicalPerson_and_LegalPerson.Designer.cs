// <auto-generated />
using System;
using Estacionamento.Infra.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Estacionamento.Infra.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20220710132905_Add_CreatedAt_in_PhysicalPerson_and_LegalPerson")]
    partial class Add_CreatedAt_in_PhysicalPerson_and_LegalPerson
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.0");

            modelBuilder.Entity("Estacionamento.Domain.Emails_Pessoa_Fisica.Entity.EmailsPessoaFisicaEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IdPessoaFisica")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IdPessoaFisica");

                    b.ToTable("EmailsPessoaFisica");
                });

            modelBuilder.Entity("Estacionamento.Domain.Emails_Pessoa_Juridica.EmailsPessoaJuridicaEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IdPessoaJuridica")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IdPessoaJuridica");

                    b.ToTable("EmailsPessoaJuridica");
                });

            modelBuilder.Entity("Estacionamento.Domain.Pessoa_Juridica.Entity.PessoaJuridicaEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("CNPJ")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Endereço")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NomeFantasia")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RazaoSocial")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("createdAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("PessoaJuridica");
                });

            modelBuilder.Entity("Estacionamento.Domain.Telefones_Pessoa_Juridica.TelefonesPessoaJuridicaEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("IdPessoaJuridica")
                        .HasColumnType("int");

                    b.Property<string>("Telefone")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("IdPessoaJuridica");

                    b.ToTable("TelefonesPessoaJuridica");
                });

            modelBuilder.Entity("Estacionamento.Infra.Pessoa_Fisica.Entity.PessoaFisicaEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("CPF")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DataNascimento")
                        .HasColumnType("datetime2");

                    b.Property<string>("Endereço")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nome")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RG")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Sexo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("createdAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("PessoaFisica");
                });

            modelBuilder.Entity("Estacionamento.Infra.Telefone_Pessoa_Fisica.Entity.TelefonesPessoaFisicaEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("IdPessoaFisica")
                        .HasColumnType("int");

                    b.Property<string>("Telefone")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("IdPessoaFisica");

                    b.ToTable("TelefonesPessoaFisica");
                });

            modelBuilder.Entity("Estacionamento.Domain.Emails_Pessoa_Fisica.Entity.EmailsPessoaFisicaEntity", b =>
                {
                    b.HasOne("Estacionamento.Infra.Pessoa_Fisica.Entity.PessoaFisicaEntity", "PessoaFisica")
                        .WithMany("Emails")
                        .HasForeignKey("IdPessoaFisica")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PessoaFisica");
                });

            modelBuilder.Entity("Estacionamento.Domain.Emails_Pessoa_Juridica.EmailsPessoaJuridicaEntity", b =>
                {
                    b.HasOne("Estacionamento.Domain.Pessoa_Juridica.Entity.PessoaJuridicaEntity", "PessoaJuridica")
                        .WithMany("Emails")
                        .HasForeignKey("IdPessoaJuridica")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PessoaJuridica");
                });

            modelBuilder.Entity("Estacionamento.Domain.Telefones_Pessoa_Juridica.TelefonesPessoaJuridicaEntity", b =>
                {
                    b.HasOne("Estacionamento.Domain.Pessoa_Juridica.Entity.PessoaJuridicaEntity", "PessoaJuridica")
                        .WithMany("Telefones")
                        .HasForeignKey("IdPessoaJuridica")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PessoaJuridica");
                });

            modelBuilder.Entity("Estacionamento.Infra.Telefone_Pessoa_Fisica.Entity.TelefonesPessoaFisicaEntity", b =>
                {
                    b.HasOne("Estacionamento.Infra.Pessoa_Fisica.Entity.PessoaFisicaEntity", "PessoaFisica")
                        .WithMany("Telefones")
                        .HasForeignKey("IdPessoaFisica")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PessoaFisica");
                });

            modelBuilder.Entity("Estacionamento.Domain.Pessoa_Juridica.Entity.PessoaJuridicaEntity", b =>
                {
                    b.Navigation("Emails");

                    b.Navigation("Telefones");
                });

            modelBuilder.Entity("Estacionamento.Infra.Pessoa_Fisica.Entity.PessoaFisicaEntity", b =>
                {
                    b.Navigation("Emails");

                    b.Navigation("Telefones");
                });
#pragma warning restore 612, 618
        }
    }
}
